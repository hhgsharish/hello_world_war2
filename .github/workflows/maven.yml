name: Java CI with Maven, SonarQube, and Production Deployment.

on:
  push:
    branches:
      - main
      - 'feature/*'
  pull_request:
    branches:
      - master
      - 'feature/*'
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Trigger deploy to production'
        required: true
        default: 'false'

jobs:
  # Parallel Job: Build and Test on Self-Hosted EC2 (with Tomcat installed )
  build_and_test:
    # This job will run  on a self-hosted runner with the "staging" label.
    # Ensure your self-hosted runner for staging has the label `staging` assigned to it.
    runs-on: [self-hosted, staging]  # Self-hosted EC2 with Tomcat installed (Staging)
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Environment Setup Script (env-setup.sh)
        run: |
          chmod +x ./env-setup.sh
          ./env-setup.sh  # This sets up Java, Maven, etc.

      - name: Build with Maven
        run: mvn clean install -DskipTests
        #if: ${{ github.event_name != 'pull_request' }}  # Only run on push events, skip for PR

      - name: Run Unit Tests with Maven
        run: mvn test
        #if: ${{ success() }}  # Run this step only if the previous build step succeeded
        
  # Sequential Jobs: SonarQube Analysis and Artifact Upload
  sonar_analysis:
    # This job will also run on the self-hosted runner with the "staging" label.
    # Ensure the staging runner has the "staging" label.
    runs-on: [self-hosted, staging]  # Self-hosted EC2 with Tomcat installed (Staging)
    needs: build_and_test
    if: ${{ needs.build_and_test.result == 'success' }}  # Run only if build and test succeed
    steps:
     # - name: Checkout code
     #   uses: actions/checkout@v2

      - name: Run SonarQube analysis
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.organization=hhgsharish \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.projectKey=hhgsharish_hello_world_war2 \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            
  upload_artifact:
    # This job will also run on the self-hosted runner with the "staging" label.
    # Ensure the staging runner has the "staging" label.
    runs-on: [self-hosted, staging]  # Self-hosted EC2 with Tomcat installed (Staging)
    needs: build_and_test
    if: ${{ needs.build_and_test.result == 'success' }}  # Run only if build and test succeed
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure Maven settings
        run: |
          echo "Uploading artifact to JFrog Artifactory..."
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>hello-world-war-libs-snapshot</id>
                      <username>${{ secrets.JFROG_USERNAME }}</username>
                      <password>${{ secrets.JFROG_TOKEN }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

           mvn clean deploy   
  deploy:
    # This job will deploy to both staging and production environments based on the matrix configuration.
    # The staging environment will use the self-hosted runner with the "staging" label.
    # The production environment will use the self-hosted runner with the "production" label.
    strategy:
      matrix:
        node: [staging, prod]
    runs-on: ${{ matrix.node }} # Use dynamic environment (staging or production)
    needs: [sonar_analysis, upload_artifact]  # Waits for SonarQube and Artifactory jobs to complete
      # Deploy to both staging and production environments
    steps:
      #- name: Checkout code
      #  uses: actions/checkout@v2

      - name: Deploy to Tomcat (Staging/Production)
        run: |
          echo "Deploying to ${{ matrix.node }}..."

          # Deploy artifact to the appropriate Tomcat server based on the environment
          if [ "${{ matrix.node }}" == "staging" ]; then
            sudo chown -R ubuntu:ubuntu /opt
            cd /opt/apache-tomcat-10.1.34/webapps/
            curl -L -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_TOKEN }}" -O "http://65.2.124.189:8082/artifactory/hello-world-war-libs-snapshot/com/example/my-helloworld/1.0-SNAPSHOT/my-helloworld-1.0-20250116.162120-1.war"
            
          elif [ "${{ matrix.node }}" == "production" ]; then
            sudo chown -R ubuntu:ubuntu /opt
            cd /opt/apache-tomcat-10.1.34/webapps/
            curl -L -u "${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_TOKEN }}" -O "http://65.2.124.189:8082/artifactory/hello-world-war-libs-snapshot/com/example/my-helloworld/1.0-SNAPSHOT/my-helloworld-1.0-20250116.162120-1.war"
             
          else
              echo "Skipping production deployment:Node is not matching"
          fi
        if: ${{ needs.upload_artifact.result == 'success' }}  # Deploy only if the artifact upload was successful

 # Conditional Job: Trigger Deploy Only if Deploy Input is True (Manual Trigger)
  deploy_input_condition:
    # This job will run on the self-hosted runner with the "production" label.
    # Ensure your production runner has the label `production` assigned to it.
    runs-on: [self-hosted, production]  # Self-hosted EC2 with Tomcat installed (Production)
    if: ${{ github.event.inputs.deploy == 'true' }}  # Only runs if the deploy input is set to true from workflow_dispatch
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Production (Input Triggered)
        run: |
          echo "Manual deploy triggered, deploying to production..."
          # Deployment logic here
        if: ${{ github.event.inputs.deploy == 'true' }}  # Condition based on the inpu
